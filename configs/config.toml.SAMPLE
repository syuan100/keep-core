# This is a TOML configuration file for DKG, P2P networking and connction to Ethereum

# Provider Initialization Example

[ethereum]
	URL                = "ws://127.0.0.1:8546"
	URLRPC             = "http://127.0.0.1:8545"
	# Uncomment to override the defaults for transaction status monitoring.
	#
	# MiningCheckInterval is the interval in which transaction
	# mining status is checked. If the transaction is not mined within this
	# time, the gas price is increased and transaction is resubmitted.
	#
	# MiningCheckInterval = 60  # 60 sec (default value)
	#
	# MaxGasPrice specifies the default maximum gas price the client is
	# willing to pay for the transaction to be mined. The offered transaction
	# gas price can not be higher than the max gas price value. If the maximum
	# allowed gas price is reached, no further resubmission attempts are
	# performed.
	#
	# MaxGasPrice = 500000000000 # 500 Gwei (default value)
	#
	# Uncomment to enable Ethereum node rate limiting. Both properties can be
	# used together or separately.
	#
	# RequestsPerSecondLimit sets the maximum average number of requests
	# per second which can be executed against the Ethereum node.
	# All types of Ethereum node requests are rate-limited,
	# including view function calls.
	#
	# RequestsPerSecondLimit = 150
	#
	# ConcurrencyLimit sets the maximum number of concurrent requests which
	# can be executed against the Ethereum node at the same time.
	# This limit affects all types of Ethereum node requests,
	# including view function calls.
	#
	# ConcurrencyLimit = 30

[ethereum.account]
	KeyFile            = "/Users/someuser/ethereum/data/keystore/UTC--2018-03-11T01-37-33.202765887Z--AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AAAAAAAAA"

[ethereum.ContractAddresses]
	# Hex-encoded address of KeepRandomBeaconOperator contract
	KeepRandomBeaconOperator = "0xBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
	# Hex-encoded address of TokenStaking contract
	TokenStaking = "0xCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"
	# Hex-encoded address of KeepRandomBeaconService contract. Only needed
	# in cases where the client's utility functions will be used (e.g., the
	# relay subcommand).
	KeepRandomBeaconService = "0xCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"

[LibP2P]
 	Peers = ["/ip4/127.0.0.1/tcp/3919/ipfs/njOXcNpVTweO3fmX72OTgDX9lfb1AYiiq4BN6Da1tFy9nT3sRT2h1"]
 	Port = 3920
	#
	# Uncomment to override the node's default addresses announced in the network
	# AnnouncedAddresses = ["/dns4/example.com/tcp/3919", "/ip4/80.70.60.50/tcp/3919"]    
	#
	# Uncomment to enable courtesy message dissemination for topics this node is
	# not subscribed to. Messages will be forwarded to peers for the duration
	# specified as a value in seconds.
	# Message dissemination is disabled by default and should be enabled only
	# on selected bootstrap nodes. It is not a good idea to enable dissemination
	# on non-bootstrap node as it may clutter communication and eventually lead
	# to blacklisting the node. The maximum allowed value is 90 seconds.
	#
	# DisseminationTime = 90

[Storage]
  DataDir = "/my/secure/location"

# Uncomment to enable the metrics module which collects and exposes information
# useful for external monitoring tools usually operating on time series data.
# All values exposed by metrics module are quantifiable or countable.
#
# The following metrics are available:
# - connected peers count
# - connected bootstraps count
# - eth client connectivity status
#
# The port on which the `/metrics` endpoint will be available and the frequency
# with which the metrics will be collected can be customized using the
# below parameters.
# [Metrics]
    # Port = 8080
    # NetworkMetricsTick = 60
    # EthereumMetricsTick = 600

# Uncomment to enable the diagnostics module which exposes information useful
# for debugging and diagnostic client's status.
#
# Diagnostics module exposes the following information:
# - list of connected peers along with their network id and ethereum operator address
# - information about the client's network id and ethereum operator address
#
# The port on which the `/diagnostics` endpoint will be available can be
# customized below.
# [Diagnostics]
    # Port = 8081