// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/message.proto

package pb

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EphemeralPublicKey struct {
	SenderID            uint32            `protobuf:"varint,1,opt,name=senderID,proto3" json:"senderID,omitempty"`
	ReceiverID          uint32            `protobuf:"varint,2,opt,name=receiverID,proto3" json:"receiverID,omitempty"`
	EphemeralPublicKeys map[uint32][]byte `protobuf:"bytes,3,rep,name=ephemeralPublicKeys,proto3" json:"ephemeralPublicKeys,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *EphemeralPublicKey) Reset()      { *m = EphemeralPublicKey{} }
func (*EphemeralPublicKey) ProtoMessage() {}
func (*EphemeralPublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_8447775385e7eb85, []int{0}
}
func (m *EphemeralPublicKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EphemeralPublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EphemeralPublicKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EphemeralPublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EphemeralPublicKey.Merge(m, src)
}
func (m *EphemeralPublicKey) XXX_Size() int {
	return m.Size()
}
func (m *EphemeralPublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_EphemeralPublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_EphemeralPublicKey proto.InternalMessageInfo

func (m *EphemeralPublicKey) GetSenderID() uint32 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

func (m *EphemeralPublicKey) GetReceiverID() uint32 {
	if m != nil {
		return m.ReceiverID
	}
	return 0
}

func (m *EphemeralPublicKey) GetEphemeralPublicKeys() map[uint32][]byte {
	if m != nil {
		return m.EphemeralPublicKeys
	}
	return nil
}

type MemberCommitments struct {
	SenderID    uint32   `protobuf:"varint,1,opt,name=senderID,proto3" json:"senderID,omitempty"`
	Commitments [][]byte `protobuf:"bytes,2,rep,name=commitments,proto3" json:"commitments,omitempty"`
}

func (m *MemberCommitments) Reset()      { *m = MemberCommitments{} }
func (*MemberCommitments) ProtoMessage() {}
func (*MemberCommitments) Descriptor() ([]byte, []int) {
	return fileDescriptor_8447775385e7eb85, []int{1}
}
func (m *MemberCommitments) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberCommitments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberCommitments.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemberCommitments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberCommitments.Merge(m, src)
}
func (m *MemberCommitments) XXX_Size() int {
	return m.Size()
}
func (m *MemberCommitments) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberCommitments.DiscardUnknown(m)
}

var xxx_messageInfo_MemberCommitments proto.InternalMessageInfo

func (m *MemberCommitments) GetSenderID() uint32 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

func (m *MemberCommitments) GetCommitments() [][]byte {
	if m != nil {
		return m.Commitments
	}
	return nil
}

type PeerShares struct {
	SenderID uint32                        `protobuf:"varint,1,opt,name=senderID,proto3" json:"senderID,omitempty"`
	Shares   map[uint32]*PeerShares_Shares `protobuf:"bytes,2,rep,name=shares,proto3" json:"shares,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PeerShares) Reset()      { *m = PeerShares{} }
func (*PeerShares) ProtoMessage() {}
func (*PeerShares) Descriptor() ([]byte, []int) {
	return fileDescriptor_8447775385e7eb85, []int{2}
}
func (m *PeerShares) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerShares) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerShares.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeerShares) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerShares.Merge(m, src)
}
func (m *PeerShares) XXX_Size() int {
	return m.Size()
}
func (m *PeerShares) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerShares.DiscardUnknown(m)
}

var xxx_messageInfo_PeerShares proto.InternalMessageInfo

func (m *PeerShares) GetSenderID() uint32 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

func (m *PeerShares) GetShares() map[uint32]*PeerShares_Shares {
	if m != nil {
		return m.Shares
	}
	return nil
}

type PeerShares_Shares struct {
	EncryptedShareS []byte `protobuf:"bytes,1,opt,name=encryptedShareS,proto3" json:"encryptedShareS,omitempty"`
	EncryptedShareT []byte `protobuf:"bytes,2,opt,name=encryptedShareT,proto3" json:"encryptedShareT,omitempty"`
}

func (m *PeerShares_Shares) Reset()      { *m = PeerShares_Shares{} }
func (*PeerShares_Shares) ProtoMessage() {}
func (*PeerShares_Shares) Descriptor() ([]byte, []int) {
	return fileDescriptor_8447775385e7eb85, []int{2, 0}
}
func (m *PeerShares_Shares) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerShares_Shares) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerShares_Shares.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeerShares_Shares) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerShares_Shares.Merge(m, src)
}
func (m *PeerShares_Shares) XXX_Size() int {
	return m.Size()
}
func (m *PeerShares_Shares) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerShares_Shares.DiscardUnknown(m)
}

var xxx_messageInfo_PeerShares_Shares proto.InternalMessageInfo

func (m *PeerShares_Shares) GetEncryptedShareS() []byte {
	if m != nil {
		return m.EncryptedShareS
	}
	return nil
}

func (m *PeerShares_Shares) GetEncryptedShareT() []byte {
	if m != nil {
		return m.EncryptedShareT
	}
	return nil
}

type SecretSharesAccusations struct {
	SenderID           uint32            `protobuf:"varint,1,opt,name=senderID,proto3" json:"senderID,omitempty"`
	AccusedMembersKeys map[uint32][]byte `protobuf:"bytes,2,rep,name=accusedMembersKeys,proto3" json:"accusedMembersKeys,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *SecretSharesAccusations) Reset()      { *m = SecretSharesAccusations{} }
func (*SecretSharesAccusations) ProtoMessage() {}
func (*SecretSharesAccusations) Descriptor() ([]byte, []int) {
	return fileDescriptor_8447775385e7eb85, []int{3}
}
func (m *SecretSharesAccusations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecretSharesAccusations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecretSharesAccusations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecretSharesAccusations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecretSharesAccusations.Merge(m, src)
}
func (m *SecretSharesAccusations) XXX_Size() int {
	return m.Size()
}
func (m *SecretSharesAccusations) XXX_DiscardUnknown() {
	xxx_messageInfo_SecretSharesAccusations.DiscardUnknown(m)
}

var xxx_messageInfo_SecretSharesAccusations proto.InternalMessageInfo

func (m *SecretSharesAccusations) GetSenderID() uint32 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

func (m *SecretSharesAccusations) GetAccusedMembersKeys() map[uint32][]byte {
	if m != nil {
		return m.AccusedMembersKeys
	}
	return nil
}

type MemberPublicKeySharePoints struct {
	SenderID             uint32   `protobuf:"varint,1,opt,name=senderID,proto3" json:"senderID,omitempty"`
	PublicKeySharePoints [][]byte `protobuf:"bytes,2,rep,name=publicKeySharePoints,proto3" json:"publicKeySharePoints,omitempty"`
}

func (m *MemberPublicKeySharePoints) Reset()      { *m = MemberPublicKeySharePoints{} }
func (*MemberPublicKeySharePoints) ProtoMessage() {}
func (*MemberPublicKeySharePoints) Descriptor() ([]byte, []int) {
	return fileDescriptor_8447775385e7eb85, []int{4}
}
func (m *MemberPublicKeySharePoints) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberPublicKeySharePoints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberPublicKeySharePoints.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemberPublicKeySharePoints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberPublicKeySharePoints.Merge(m, src)
}
func (m *MemberPublicKeySharePoints) XXX_Size() int {
	return m.Size()
}
func (m *MemberPublicKeySharePoints) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberPublicKeySharePoints.DiscardUnknown(m)
}

var xxx_messageInfo_MemberPublicKeySharePoints proto.InternalMessageInfo

func (m *MemberPublicKeySharePoints) GetSenderID() uint32 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

func (m *MemberPublicKeySharePoints) GetPublicKeySharePoints() [][]byte {
	if m != nil {
		return m.PublicKeySharePoints
	}
	return nil
}

type PointsAccusations struct {
	SenderID           uint32            `protobuf:"varint,1,opt,name=senderID,proto3" json:"senderID,omitempty"`
	AccusedMembersKeys map[uint32][]byte `protobuf:"bytes,2,rep,name=accusedMembersKeys,proto3" json:"accusedMembersKeys,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PointsAccusations) Reset()      { *m = PointsAccusations{} }
func (*PointsAccusations) ProtoMessage() {}
func (*PointsAccusations) Descriptor() ([]byte, []int) {
	return fileDescriptor_8447775385e7eb85, []int{5}
}
func (m *PointsAccusations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PointsAccusations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PointsAccusations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PointsAccusations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PointsAccusations.Merge(m, src)
}
func (m *PointsAccusations) XXX_Size() int {
	return m.Size()
}
func (m *PointsAccusations) XXX_DiscardUnknown() {
	xxx_messageInfo_PointsAccusations.DiscardUnknown(m)
}

var xxx_messageInfo_PointsAccusations proto.InternalMessageInfo

func (m *PointsAccusations) GetSenderID() uint32 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

func (m *PointsAccusations) GetAccusedMembersKeys() map[uint32][]byte {
	if m != nil {
		return m.AccusedMembersKeys
	}
	return nil
}

type MisbehavedEphemeralKeys struct {
	SenderID    uint32            `protobuf:"varint,1,opt,name=senderID,proto3" json:"senderID,omitempty"`
	PrivateKeys map[uint32][]byte `protobuf:"bytes,2,rep,name=privateKeys,proto3" json:"privateKeys,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *MisbehavedEphemeralKeys) Reset()      { *m = MisbehavedEphemeralKeys{} }
func (*MisbehavedEphemeralKeys) ProtoMessage() {}
func (*MisbehavedEphemeralKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_8447775385e7eb85, []int{6}
}
func (m *MisbehavedEphemeralKeys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MisbehavedEphemeralKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MisbehavedEphemeralKeys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MisbehavedEphemeralKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MisbehavedEphemeralKeys.Merge(m, src)
}
func (m *MisbehavedEphemeralKeys) XXX_Size() int {
	return m.Size()
}
func (m *MisbehavedEphemeralKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_MisbehavedEphemeralKeys.DiscardUnknown(m)
}

var xxx_messageInfo_MisbehavedEphemeralKeys proto.InternalMessageInfo

func (m *MisbehavedEphemeralKeys) GetSenderID() uint32 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

func (m *MisbehavedEphemeralKeys) GetPrivateKeys() map[uint32][]byte {
	if m != nil {
		return m.PrivateKeys
	}
	return nil
}

func init() {
	proto.RegisterType((*EphemeralPublicKey)(nil), "gjkr.EphemeralPublicKey")
	proto.RegisterMapType((map[uint32][]byte)(nil), "gjkr.EphemeralPublicKey.EphemeralPublicKeysEntry")
	proto.RegisterType((*MemberCommitments)(nil), "gjkr.MemberCommitments")
	proto.RegisterType((*PeerShares)(nil), "gjkr.PeerShares")
	proto.RegisterMapType((map[uint32]*PeerShares_Shares)(nil), "gjkr.PeerShares.SharesEntry")
	proto.RegisterType((*PeerShares_Shares)(nil), "gjkr.PeerShares.Shares")
	proto.RegisterType((*SecretSharesAccusations)(nil), "gjkr.SecretSharesAccusations")
	proto.RegisterMapType((map[uint32][]byte)(nil), "gjkr.SecretSharesAccusations.AccusedMembersKeysEntry")
	proto.RegisterType((*MemberPublicKeySharePoints)(nil), "gjkr.MemberPublicKeySharePoints")
	proto.RegisterType((*PointsAccusations)(nil), "gjkr.PointsAccusations")
	proto.RegisterMapType((map[uint32][]byte)(nil), "gjkr.PointsAccusations.AccusedMembersKeysEntry")
	proto.RegisterType((*MisbehavedEphemeralKeys)(nil), "gjkr.MisbehavedEphemeralKeys")
	proto.RegisterMapType((map[uint32][]byte)(nil), "gjkr.MisbehavedEphemeralKeys.PrivateKeysEntry")
}

func init() { proto.RegisterFile("pb/message.proto", fileDescriptor_8447775385e7eb85) }

var fileDescriptor_8447775385e7eb85 = []byte{
	// 524 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0x4f, 0x8b, 0xd3, 0x40,
	0x14, 0xcf, 0xa4, 0x5a, 0xe4, 0xa5, 0x62, 0x37, 0x2e, 0xb4, 0x04, 0x19, 0x4a, 0x4f, 0xbd, 0x98,
	0xc5, 0xaa, 0xb0, 0x78, 0x10, 0x56, 0xad, 0x20, 0xb2, 0x10, 0x53, 0x4f, 0x22, 0x48, 0x92, 0x3e,
	0xb6, 0x71, 0x9b, 0x3f, 0xcc, 0xa4, 0x85, 0xde, 0xfc, 0x08, 0xfb, 0x31, 0xfc, 0x26, 0x7a, 0xec,
	0xcd, 0x3d, 0xda, 0xf4, 0xe2, 0x71, 0xbf, 0x80, 0x20, 0x9d, 0x09, 0x6d, 0x68, 0x93, 0x68, 0x4f,
	0x9e, 0x3a, 0xf3, 0xde, 0xef, 0xfd, 0xde, 0xfb, 0xfd, 0xe6, 0x35, 0xd0, 0x8c, 0xdd, 0x93, 0x00,
	0x39, 0x77, 0x2e, 0xd0, 0x8c, 0x59, 0x94, 0x44, 0xfa, 0xad, 0x8b, 0xcf, 0x97, 0xac, 0xfb, 0x9b,
	0x80, 0x3e, 0x88, 0xc7, 0x18, 0x20, 0x73, 0x26, 0xd6, 0xd4, 0x9d, 0xf8, 0xde, 0x5b, 0x9c, 0xeb,
	0x06, 0xdc, 0xe1, 0x18, 0x8e, 0x90, 0xbd, 0x79, 0xd5, 0x26, 0x1d, 0xd2, 0xbb, 0x6b, 0x6f, 0xee,
	0x3a, 0x05, 0x60, 0xe8, 0xa1, 0x3f, 0x13, 0x59, 0x55, 0x64, 0x73, 0x11, 0xdd, 0x83, 0xfb, 0xb8,
	0xc7, 0xc8, 0xdb, 0xb5, 0x4e, 0xad, 0xa7, 0xf5, 0x1f, 0x99, 0xeb, 0xb6, 0xe6, 0x7e, 0xcb, 0x82,
	0x10, 0x1f, 0x84, 0x09, 0x9b, 0xdb, 0x45, 0x6c, 0xc6, 0x6b, 0x68, 0x97, 0x15, 0xe8, 0x4d, 0xa8,
	0x5d, 0xe2, 0x3c, 0x9b, 0x7b, 0x7d, 0xd4, 0x8f, 0xe1, 0xf6, 0xcc, 0x99, 0x4c, 0x51, 0x4c, 0xdb,
	0xb0, 0xe5, 0xe5, 0x99, 0x7a, 0x4a, 0xba, 0xef, 0xe0, 0xe8, 0x1c, 0x03, 0x17, 0xd9, 0xcb, 0x28,
	0x08, 0xfc, 0x24, 0xc0, 0x30, 0xe1, 0x95, 0xea, 0x3b, 0xa0, 0x79, 0x5b, 0x68, 0x5b, 0xed, 0xd4,
	0x7a, 0x0d, 0x3b, 0x1f, 0xea, 0x5e, 0xa9, 0x00, 0x16, 0x22, 0x1b, 0x8e, 0x1d, 0x86, 0xd5, 0x64,
	0x4f, 0xa0, 0xce, 0x05, 0x4a, 0xf0, 0x68, 0xfd, 0x07, 0xd2, 0x9d, 0x6d, 0xb5, 0x29, 0x7f, 0xa4,
	0x11, 0x19, 0xd6, 0xf8, 0x08, 0xf5, 0x8c, 0xbb, 0x07, 0xf7, 0x30, 0xf4, 0xd8, 0x3c, 0x4e, 0x70,
	0x24, 0x42, 0x43, 0xd1, 0xa2, 0x61, 0xef, 0x86, 0xf7, 0x91, 0xef, 0x33, 0x2f, 0x76, 0xc3, 0x86,
	0x0d, 0x5a, 0xae, 0x69, 0x81, 0x99, 0x0f, 0xf3, 0x66, 0x6a, 0xfd, 0x56, 0xc9, 0xcc, 0x79, 0x97,
	0x57, 0x04, 0x5a, 0x43, 0xf4, 0x18, 0x26, 0x32, 0x77, 0xe6, 0x79, 0x53, 0xee, 0x24, 0x7e, 0x14,
	0x56, 0xfb, 0x83, 0xa0, 0x3b, 0x6b, 0x28, 0x8e, 0xe4, 0x23, 0x71, 0xb1, 0x49, 0xd2, 0xab, 0xa7,
	0xb2, 0x6f, 0x09, 0xad, 0x79, 0xb6, 0x57, 0x27, 0x4d, 0x2c, 0x20, 0x34, 0x06, 0xd0, 0x2a, 0x81,
	0x1f, 0xb4, 0x4b, 0x13, 0x30, 0x64, 0xfd, 0x66, 0x21, 0xc5, 0x58, 0x56, 0xe4, 0xff, 0x6d, 0xa9,
	0xfa, 0x70, 0x1c, 0x17, 0xd4, 0x64, 0xdb, 0x55, 0x98, 0xeb, 0xfe, 0x20, 0x70, 0x24, 0x8f, 0xff,
	0xea, 0xe6, 0xa7, 0x0a, 0x37, 0x4f, 0xb2, 0x57, 0xdc, 0x25, 0xfc, 0x1f, 0x3e, 0x7e, 0x23, 0xd0,
	0x3a, 0xf7, 0xb9, 0x8b, 0x63, 0x67, 0x86, 0xa3, 0xcd, 0xdf, 0x7c, 0x4d, 0x56, 0xa9, 0xcf, 0x02,
	0x2d, 0x66, 0xfe, 0xcc, 0x49, 0x30, 0x27, 0xcc, 0x94, 0xc2, 0x4a, 0xf8, 0x4c, 0x6b, 0x5b, 0x20,
	0x75, 0xe5, 0x29, 0x8c, 0xe7, 0xd0, 0xdc, 0x05, 0x1c, 0xa2, 0xe4, 0xc5, 0xe9, 0x62, 0x49, 0x95,
	0xeb, 0x25, 0x55, 0x6e, 0x96, 0x94, 0x7c, 0x49, 0x29, 0xf9, 0x9a, 0x52, 0xf2, 0x3d, 0xa5, 0x64,
	0x91, 0x52, 0xf2, 0x33, 0xa5, 0xe4, 0x57, 0x4a, 0x95, 0x9b, 0x94, 0x92, 0xab, 0x15, 0x55, 0x16,
	0x2b, 0xaa, 0x5c, 0xaf, 0xa8, 0xf2, 0x41, 0x8d, 0x5d, 0xb7, 0x2e, 0x3e, 0xd2, 0x8f, 0xff, 0x04,
	0x00, 0x00, 0xff, 0xff, 0xa7, 0xda, 0x14, 0x01, 0xb8, 0x05, 0x00, 0x00,
}

func (this *EphemeralPublicKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EphemeralPublicKey)
	if !ok {
		that2, ok := that.(EphemeralPublicKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SenderID != that1.SenderID {
		return false
	}
	if this.ReceiverID != that1.ReceiverID {
		return false
	}
	if len(this.EphemeralPublicKeys) != len(that1.EphemeralPublicKeys) {
		return false
	}
	for i := range this.EphemeralPublicKeys {
		if !bytes.Equal(this.EphemeralPublicKeys[i], that1.EphemeralPublicKeys[i]) {
			return false
		}
	}
	return true
}
func (this *MemberCommitments) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MemberCommitments)
	if !ok {
		that2, ok := that.(MemberCommitments)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SenderID != that1.SenderID {
		return false
	}
	if len(this.Commitments) != len(that1.Commitments) {
		return false
	}
	for i := range this.Commitments {
		if !bytes.Equal(this.Commitments[i], that1.Commitments[i]) {
			return false
		}
	}
	return true
}
func (this *PeerShares) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeerShares)
	if !ok {
		that2, ok := that.(PeerShares)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SenderID != that1.SenderID {
		return false
	}
	if len(this.Shares) != len(that1.Shares) {
		return false
	}
	for i := range this.Shares {
		if !this.Shares[i].Equal(that1.Shares[i]) {
			return false
		}
	}
	return true
}
func (this *PeerShares_Shares) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeerShares_Shares)
	if !ok {
		that2, ok := that.(PeerShares_Shares)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.EncryptedShareS, that1.EncryptedShareS) {
		return false
	}
	if !bytes.Equal(this.EncryptedShareT, that1.EncryptedShareT) {
		return false
	}
	return true
}
func (this *SecretSharesAccusations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecretSharesAccusations)
	if !ok {
		that2, ok := that.(SecretSharesAccusations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SenderID != that1.SenderID {
		return false
	}
	if len(this.AccusedMembersKeys) != len(that1.AccusedMembersKeys) {
		return false
	}
	for i := range this.AccusedMembersKeys {
		if !bytes.Equal(this.AccusedMembersKeys[i], that1.AccusedMembersKeys[i]) {
			return false
		}
	}
	return true
}
func (this *MemberPublicKeySharePoints) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MemberPublicKeySharePoints)
	if !ok {
		that2, ok := that.(MemberPublicKeySharePoints)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SenderID != that1.SenderID {
		return false
	}
	if len(this.PublicKeySharePoints) != len(that1.PublicKeySharePoints) {
		return false
	}
	for i := range this.PublicKeySharePoints {
		if !bytes.Equal(this.PublicKeySharePoints[i], that1.PublicKeySharePoints[i]) {
			return false
		}
	}
	return true
}
func (this *PointsAccusations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PointsAccusations)
	if !ok {
		that2, ok := that.(PointsAccusations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SenderID != that1.SenderID {
		return false
	}
	if len(this.AccusedMembersKeys) != len(that1.AccusedMembersKeys) {
		return false
	}
	for i := range this.AccusedMembersKeys {
		if !bytes.Equal(this.AccusedMembersKeys[i], that1.AccusedMembersKeys[i]) {
			return false
		}
	}
	return true
}
func (this *MisbehavedEphemeralKeys) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MisbehavedEphemeralKeys)
	if !ok {
		that2, ok := that.(MisbehavedEphemeralKeys)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SenderID != that1.SenderID {
		return false
	}
	if len(this.PrivateKeys) != len(that1.PrivateKeys) {
		return false
	}
	for i := range this.PrivateKeys {
		if !bytes.Equal(this.PrivateKeys[i], that1.PrivateKeys[i]) {
			return false
		}
	}
	return true
}
func (this *EphemeralPublicKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.EphemeralPublicKey{")
	s = append(s, "SenderID: "+fmt.Sprintf("%#v", this.SenderID)+",\n")
	s = append(s, "ReceiverID: "+fmt.Sprintf("%#v", this.ReceiverID)+",\n")
	keysForEphemeralPublicKeys := make([]uint32, 0, len(this.EphemeralPublicKeys))
	for k, _ := range this.EphemeralPublicKeys {
		keysForEphemeralPublicKeys = append(keysForEphemeralPublicKeys, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForEphemeralPublicKeys)
	mapStringForEphemeralPublicKeys := "map[uint32][]byte{"
	for _, k := range keysForEphemeralPublicKeys {
		mapStringForEphemeralPublicKeys += fmt.Sprintf("%#v: %#v,", k, this.EphemeralPublicKeys[k])
	}
	mapStringForEphemeralPublicKeys += "}"
	if this.EphemeralPublicKeys != nil {
		s = append(s, "EphemeralPublicKeys: "+mapStringForEphemeralPublicKeys+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MemberCommitments) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.MemberCommitments{")
	s = append(s, "SenderID: "+fmt.Sprintf("%#v", this.SenderID)+",\n")
	s = append(s, "Commitments: "+fmt.Sprintf("%#v", this.Commitments)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeerShares) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.PeerShares{")
	s = append(s, "SenderID: "+fmt.Sprintf("%#v", this.SenderID)+",\n")
	keysForShares := make([]uint32, 0, len(this.Shares))
	for k, _ := range this.Shares {
		keysForShares = append(keysForShares, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForShares)
	mapStringForShares := "map[uint32]*PeerShares_Shares{"
	for _, k := range keysForShares {
		mapStringForShares += fmt.Sprintf("%#v: %#v,", k, this.Shares[k])
	}
	mapStringForShares += "}"
	if this.Shares != nil {
		s = append(s, "Shares: "+mapStringForShares+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeerShares_Shares) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.PeerShares_Shares{")
	s = append(s, "EncryptedShareS: "+fmt.Sprintf("%#v", this.EncryptedShareS)+",\n")
	s = append(s, "EncryptedShareT: "+fmt.Sprintf("%#v", this.EncryptedShareT)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SecretSharesAccusations) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SecretSharesAccusations{")
	s = append(s, "SenderID: "+fmt.Sprintf("%#v", this.SenderID)+",\n")
	keysForAccusedMembersKeys := make([]uint32, 0, len(this.AccusedMembersKeys))
	for k, _ := range this.AccusedMembersKeys {
		keysForAccusedMembersKeys = append(keysForAccusedMembersKeys, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForAccusedMembersKeys)
	mapStringForAccusedMembersKeys := "map[uint32][]byte{"
	for _, k := range keysForAccusedMembersKeys {
		mapStringForAccusedMembersKeys += fmt.Sprintf("%#v: %#v,", k, this.AccusedMembersKeys[k])
	}
	mapStringForAccusedMembersKeys += "}"
	if this.AccusedMembersKeys != nil {
		s = append(s, "AccusedMembersKeys: "+mapStringForAccusedMembersKeys+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MemberPublicKeySharePoints) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.MemberPublicKeySharePoints{")
	s = append(s, "SenderID: "+fmt.Sprintf("%#v", this.SenderID)+",\n")
	s = append(s, "PublicKeySharePoints: "+fmt.Sprintf("%#v", this.PublicKeySharePoints)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PointsAccusations) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.PointsAccusations{")
	s = append(s, "SenderID: "+fmt.Sprintf("%#v", this.SenderID)+",\n")
	keysForAccusedMembersKeys := make([]uint32, 0, len(this.AccusedMembersKeys))
	for k, _ := range this.AccusedMembersKeys {
		keysForAccusedMembersKeys = append(keysForAccusedMembersKeys, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForAccusedMembersKeys)
	mapStringForAccusedMembersKeys := "map[uint32][]byte{"
	for _, k := range keysForAccusedMembersKeys {
		mapStringForAccusedMembersKeys += fmt.Sprintf("%#v: %#v,", k, this.AccusedMembersKeys[k])
	}
	mapStringForAccusedMembersKeys += "}"
	if this.AccusedMembersKeys != nil {
		s = append(s, "AccusedMembersKeys: "+mapStringForAccusedMembersKeys+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MisbehavedEphemeralKeys) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.MisbehavedEphemeralKeys{")
	s = append(s, "SenderID: "+fmt.Sprintf("%#v", this.SenderID)+",\n")
	keysForPrivateKeys := make([]uint32, 0, len(this.PrivateKeys))
	for k, _ := range this.PrivateKeys {
		keysForPrivateKeys = append(keysForPrivateKeys, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForPrivateKeys)
	mapStringForPrivateKeys := "map[uint32][]byte{"
	for _, k := range keysForPrivateKeys {
		mapStringForPrivateKeys += fmt.Sprintf("%#v: %#v,", k, this.PrivateKeys[k])
	}
	mapStringForPrivateKeys += "}"
	if this.PrivateKeys != nil {
		s = append(s, "PrivateKeys: "+mapStringForPrivateKeys+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *EphemeralPublicKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EphemeralPublicKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EphemeralPublicKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EphemeralPublicKeys) > 0 {
		for k := range m.EphemeralPublicKeys {
			v := m.EphemeralPublicKeys[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintMessage(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMessage(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ReceiverID != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ReceiverID))
		i--
		dAtA[i] = 0x10
	}
	if m.SenderID != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SenderID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MemberCommitments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberCommitments) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemberCommitments) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commitments) > 0 {
		for iNdEx := len(m.Commitments) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Commitments[iNdEx])
			copy(dAtA[i:], m.Commitments[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.Commitments[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.SenderID != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SenderID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PeerShares) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerShares) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerShares) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shares) > 0 {
		for k := range m.Shares {
			v := m.Shares[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMessage(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMessage(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.SenderID != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SenderID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PeerShares_Shares) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerShares_Shares) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerShares_Shares) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncryptedShareT) > 0 {
		i -= len(m.EncryptedShareT)
		copy(dAtA[i:], m.EncryptedShareT)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.EncryptedShareT)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EncryptedShareS) > 0 {
		i -= len(m.EncryptedShareS)
		copy(dAtA[i:], m.EncryptedShareS)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.EncryptedShareS)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecretSharesAccusations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecretSharesAccusations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecretSharesAccusations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccusedMembersKeys) > 0 {
		for k := range m.AccusedMembersKeys {
			v := m.AccusedMembersKeys[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintMessage(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMessage(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.SenderID != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SenderID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MemberPublicKeySharePoints) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberPublicKeySharePoints) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemberPublicKeySharePoints) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKeySharePoints) > 0 {
		for iNdEx := len(m.PublicKeySharePoints) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PublicKeySharePoints[iNdEx])
			copy(dAtA[i:], m.PublicKeySharePoints[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.PublicKeySharePoints[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.SenderID != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SenderID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PointsAccusations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PointsAccusations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PointsAccusations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccusedMembersKeys) > 0 {
		for k := range m.AccusedMembersKeys {
			v := m.AccusedMembersKeys[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintMessage(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMessage(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.SenderID != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SenderID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MisbehavedEphemeralKeys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MisbehavedEphemeralKeys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MisbehavedEphemeralKeys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PrivateKeys) > 0 {
		for k := range m.PrivateKeys {
			v := m.PrivateKeys[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintMessage(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMessage(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.SenderID != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SenderID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EphemeralPublicKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SenderID != 0 {
		n += 1 + sovMessage(uint64(m.SenderID))
	}
	if m.ReceiverID != 0 {
		n += 1 + sovMessage(uint64(m.ReceiverID))
	}
	if len(m.EphemeralPublicKeys) > 0 {
		for k, v := range m.EphemeralPublicKeys {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovMessage(uint64(len(v)))
			}
			mapEntrySize := 1 + sovMessage(uint64(k)) + l
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *MemberCommitments) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SenderID != 0 {
		n += 1 + sovMessage(uint64(m.SenderID))
	}
	if len(m.Commitments) > 0 {
		for _, b := range m.Commitments {
			l = len(b)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func (m *PeerShares) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SenderID != 0 {
		n += 1 + sovMessage(uint64(m.SenderID))
	}
	if len(m.Shares) > 0 {
		for k, v := range m.Shares {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMessage(uint64(l))
			}
			mapEntrySize := 1 + sovMessage(uint64(k)) + l
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PeerShares_Shares) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EncryptedShareS)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.EncryptedShareT)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *SecretSharesAccusations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SenderID != 0 {
		n += 1 + sovMessage(uint64(m.SenderID))
	}
	if len(m.AccusedMembersKeys) > 0 {
		for k, v := range m.AccusedMembersKeys {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovMessage(uint64(len(v)))
			}
			mapEntrySize := 1 + sovMessage(uint64(k)) + l
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *MemberPublicKeySharePoints) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SenderID != 0 {
		n += 1 + sovMessage(uint64(m.SenderID))
	}
	if len(m.PublicKeySharePoints) > 0 {
		for _, b := range m.PublicKeySharePoints {
			l = len(b)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func (m *PointsAccusations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SenderID != 0 {
		n += 1 + sovMessage(uint64(m.SenderID))
	}
	if len(m.AccusedMembersKeys) > 0 {
		for k, v := range m.AccusedMembersKeys {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovMessage(uint64(len(v)))
			}
			mapEntrySize := 1 + sovMessage(uint64(k)) + l
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *MisbehavedEphemeralKeys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SenderID != 0 {
		n += 1 + sovMessage(uint64(m.SenderID))
	}
	if len(m.PrivateKeys) > 0 {
		for k, v := range m.PrivateKeys {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovMessage(uint64(len(v)))
			}
			mapEntrySize := 1 + sovMessage(uint64(k)) + l
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *EphemeralPublicKey) String() string {
	if this == nil {
		return "nil"
	}
	keysForEphemeralPublicKeys := make([]uint32, 0, len(this.EphemeralPublicKeys))
	for k, _ := range this.EphemeralPublicKeys {
		keysForEphemeralPublicKeys = append(keysForEphemeralPublicKeys, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForEphemeralPublicKeys)
	mapStringForEphemeralPublicKeys := "map[uint32][]byte{"
	for _, k := range keysForEphemeralPublicKeys {
		mapStringForEphemeralPublicKeys += fmt.Sprintf("%v: %v,", k, this.EphemeralPublicKeys[k])
	}
	mapStringForEphemeralPublicKeys += "}"
	s := strings.Join([]string{`&EphemeralPublicKey{`,
		`SenderID:` + fmt.Sprintf("%v", this.SenderID) + `,`,
		`ReceiverID:` + fmt.Sprintf("%v", this.ReceiverID) + `,`,
		`EphemeralPublicKeys:` + mapStringForEphemeralPublicKeys + `,`,
		`}`,
	}, "")
	return s
}
func (this *MemberCommitments) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MemberCommitments{`,
		`SenderID:` + fmt.Sprintf("%v", this.SenderID) + `,`,
		`Commitments:` + fmt.Sprintf("%v", this.Commitments) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerShares) String() string {
	if this == nil {
		return "nil"
	}
	keysForShares := make([]uint32, 0, len(this.Shares))
	for k, _ := range this.Shares {
		keysForShares = append(keysForShares, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForShares)
	mapStringForShares := "map[uint32]*PeerShares_Shares{"
	for _, k := range keysForShares {
		mapStringForShares += fmt.Sprintf("%v: %v,", k, this.Shares[k])
	}
	mapStringForShares += "}"
	s := strings.Join([]string{`&PeerShares{`,
		`SenderID:` + fmt.Sprintf("%v", this.SenderID) + `,`,
		`Shares:` + mapStringForShares + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerShares_Shares) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeerShares_Shares{`,
		`EncryptedShareS:` + fmt.Sprintf("%v", this.EncryptedShareS) + `,`,
		`EncryptedShareT:` + fmt.Sprintf("%v", this.EncryptedShareT) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecretSharesAccusations) String() string {
	if this == nil {
		return "nil"
	}
	keysForAccusedMembersKeys := make([]uint32, 0, len(this.AccusedMembersKeys))
	for k, _ := range this.AccusedMembersKeys {
		keysForAccusedMembersKeys = append(keysForAccusedMembersKeys, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForAccusedMembersKeys)
	mapStringForAccusedMembersKeys := "map[uint32][]byte{"
	for _, k := range keysForAccusedMembersKeys {
		mapStringForAccusedMembersKeys += fmt.Sprintf("%v: %v,", k, this.AccusedMembersKeys[k])
	}
	mapStringForAccusedMembersKeys += "}"
	s := strings.Join([]string{`&SecretSharesAccusations{`,
		`SenderID:` + fmt.Sprintf("%v", this.SenderID) + `,`,
		`AccusedMembersKeys:` + mapStringForAccusedMembersKeys + `,`,
		`}`,
	}, "")
	return s
}
func (this *MemberPublicKeySharePoints) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MemberPublicKeySharePoints{`,
		`SenderID:` + fmt.Sprintf("%v", this.SenderID) + `,`,
		`PublicKeySharePoints:` + fmt.Sprintf("%v", this.PublicKeySharePoints) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PointsAccusations) String() string {
	if this == nil {
		return "nil"
	}
	keysForAccusedMembersKeys := make([]uint32, 0, len(this.AccusedMembersKeys))
	for k, _ := range this.AccusedMembersKeys {
		keysForAccusedMembersKeys = append(keysForAccusedMembersKeys, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForAccusedMembersKeys)
	mapStringForAccusedMembersKeys := "map[uint32][]byte{"
	for _, k := range keysForAccusedMembersKeys {
		mapStringForAccusedMembersKeys += fmt.Sprintf("%v: %v,", k, this.AccusedMembersKeys[k])
	}
	mapStringForAccusedMembersKeys += "}"
	s := strings.Join([]string{`&PointsAccusations{`,
		`SenderID:` + fmt.Sprintf("%v", this.SenderID) + `,`,
		`AccusedMembersKeys:` + mapStringForAccusedMembersKeys + `,`,
		`}`,
	}, "")
	return s
}
func (this *MisbehavedEphemeralKeys) String() string {
	if this == nil {
		return "nil"
	}
	keysForPrivateKeys := make([]uint32, 0, len(this.PrivateKeys))
	for k, _ := range this.PrivateKeys {
		keysForPrivateKeys = append(keysForPrivateKeys, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForPrivateKeys)
	mapStringForPrivateKeys := "map[uint32][]byte{"
	for _, k := range keysForPrivateKeys {
		mapStringForPrivateKeys += fmt.Sprintf("%v: %v,", k, this.PrivateKeys[k])
	}
	mapStringForPrivateKeys += "}"
	s := strings.Join([]string{`&MisbehavedEphemeralKeys{`,
		`SenderID:` + fmt.Sprintf("%v", this.SenderID) + `,`,
		`PrivateKeys:` + mapStringForPrivateKeys + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *EphemeralPublicKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EphemeralPublicKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EphemeralPublicKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			m.SenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverID", wireType)
			}
			m.ReceiverID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiverID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EphemeralPublicKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EphemeralPublicKeys == nil {
				m.EphemeralPublicKeys = make(map[uint32][]byte)
			}
			var mapkey uint32
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthMessage
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthMessage
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EphemeralPublicKeys[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberCommitments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberCommitments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberCommitments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			m.SenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitments", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitments = append(m.Commitments, make([]byte, postIndex-iNdEx))
			copy(m.Commitments[len(m.Commitments)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerShares) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerShares: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerShares: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			m.SenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shares == nil {
				m.Shares = make(map[uint32]*PeerShares_Shares)
			}
			var mapkey uint32
			var mapvalue *PeerShares_Shares
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMessage
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMessage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PeerShares_Shares{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Shares[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerShares_Shares) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Shares: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Shares: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedShareS", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedShareS = append(m.EncryptedShareS[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedShareS == nil {
				m.EncryptedShareS = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedShareT", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedShareT = append(m.EncryptedShareT[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedShareT == nil {
				m.EncryptedShareT = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecretSharesAccusations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecretSharesAccusations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecretSharesAccusations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			m.SenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccusedMembersKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccusedMembersKeys == nil {
				m.AccusedMembersKeys = make(map[uint32][]byte)
			}
			var mapkey uint32
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthMessage
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthMessage
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AccusedMembersKeys[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberPublicKeySharePoints) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberPublicKeySharePoints: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberPublicKeySharePoints: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			m.SenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeySharePoints", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKeySharePoints = append(m.PublicKeySharePoints, make([]byte, postIndex-iNdEx))
			copy(m.PublicKeySharePoints[len(m.PublicKeySharePoints)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PointsAccusations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PointsAccusations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PointsAccusations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			m.SenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccusedMembersKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccusedMembersKeys == nil {
				m.AccusedMembersKeys = make(map[uint32][]byte)
			}
			var mapkey uint32
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthMessage
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthMessage
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AccusedMembersKeys[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MisbehavedEphemeralKeys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MisbehavedEphemeralKeys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MisbehavedEphemeralKeys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			m.SenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivateKeys == nil {
				m.PrivateKeys = make(map[uint32][]byte)
			}
			var mapkey uint32
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthMessage
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthMessage
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PrivateKeys[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
